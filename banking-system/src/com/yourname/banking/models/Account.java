package com.yourname.banking.models;

/**
 * Account Class - Core Banking Entity
 *
 * This class represents a bank account in our banking system. It encapsulates
 * the essential account information while maintaining security through proper
 * access control. The private fields ensure that sensitive data like balance
 * can only be modified through controlled methods.
 *
 * Security Design Decisions:
 * - Private fields: Prevent direct access to sensitive account data from outside the class
 * - Protected updateBalance(): Allows only classes in the same package or subclasses to modify balance
 * - Public getters: Allow controlled read access to necessary information for legitimate operations
 * - No public setter methods: Prevents unauthorized modifications to critical account data
 */
public class Account {

    // Private fields ensure encapsulation and data security
    // Only this class can directly access these fields
    private String accountNumber;
    private double balance;
    private String ownerName;

    /**
     * Constructor to create a new bank account
     *
     * Initializes a new account with the provided account number and owner name.
     * The balance is set to 0.0 by default for security reasons - new accounts
     * should start empty and funds should be added through proper deposit procedures.
     *
     * @param accountNumber Unique identifier for this account (generated by system)
     * @param ownerName Name of the account holder
     */
    public Account(String accountNumber, String ownerName) {
        this.accountNumber = accountNumber;
        this.ownerName = ownerName;
        this.balance = 0.0;
    }

    /**
     * Public getter for account number
     *
     * Account numbers are used for identification and are safe to expose
     * to authorized systems and users. This information is needed for
     * transactions and account management operations.
     *
     * @return The account number as a String
     */
    public String getAccountNumber() {
        return accountNumber;
    }

    /**
     * Public getter for owner name
     *
     * Owner names are needed for account identification, customer service,
     * and verification purposes. This information can be safely exposed
     * to authorized parties.
     *
     * @return The name of the account owner
     */
    public String getOwnerName() {
        return ownerName;
    }

    /**
     * Public getter for current balance
     *
     * While balance is sensitive information, providing read access is necessary
     * for legitimate banking operations. The balance can only be modified through
     * the protected updateBalance() method, ensuring controlled access.
     *
     * @return The current account balance
     */
    public double getBalance() {
        return balance;
    }

        /**
     * Protected method to update account balance
     *
     * This method is the core balance modification mechanism. It's marked
     * as protected to ensure that only trusted classes within the banking
     * package or its subclasses can modify the balance. This is a critical
     * security feature that prevents unauthorized balance modifications.
     *
     * @param amount The amount to add to the balance (positive for deposits, negative for withdrawals)
     */
    protected void updateBalance(double amount) {
        this.balance += amount;

        // Log the balance update for audit purposes (in a real system, this would go to secure logs)
        System.out.println("Balance updated for account " + accountNumber +
                          ": " + (amount >= 0 ? "+" : "") + amount +
                          " | New balance: $" + String.format("%.2f", balance));
    }

    /**
     * Public method to allow controlled balance updates from authorized banking services
     *
     * This method provides controlled access to balance updates for trusted
     * classes within the banking system. It serves as a bridge between the
     * protected updateBalance() method and external service classes, with
     * security validation to ensure only authorized services can modify balances.
     *
     * @param amount The amount to add to the balance
     * @param serviceClass The class requesting the balance update (for audit purposes)
     */
    public void processBalanceUpdate(double amount, Class<?> serviceClass) {
        // Verify that only authorized service classes can call this method
        String className = serviceClass.getSimpleName();
        if (!className.contains("Service")) {
            throw new SecurityException("Unauthorized access to balance update from: " + className);
        }

        // Call the protected method
        updateBalance(amount);
    }

    /**
     * Provides a string representation of the account
     *
     * This method is useful for debugging and logging purposes.
     * Note that it doesn't expose the balance for security reasons.
     *
     * @return A string representation of the account
     */
    @Override
    public String toString() {
        return "Account{" +
                "accountNumber='" + accountNumber + '\'' +
                ", ownerName='" + ownerName + '\'' +
                ", balance=$" + String.format("%.2f", balance) +
                '}';
    }
}